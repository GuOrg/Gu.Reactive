<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
namespace Gu.Reactive
{
    using System;
    using System.Collections.ObjectModel;
    using System.Reactive.Concurrency;

    public static partial class DeferredView
    {
<#
    var typeNames = new []{"IObservableCollection", "ObservableCollection" };
    for(int i = 0; i < typeNames.Length; i++)
    {
        var typeName = typeNames[i];
        if(i > 0)
		{#>

<#      }	
#>
        public static DeferredView<TItem> AsDeferredView<TItem>(this <#= typeName #><TItem> collection, TimeSpan bufferTime)
        {
            return new DeferredView<TItem>(collection, bufferTime, null);
        }

        public static DeferredView<TItem> AsDeferredView<TItem>(this <#= typeName #><TItem> collection, TimeSpan bufferTime, IScheduler scheduler)
        {
            return new DeferredView<TItem>(collection, bufferTime, scheduler);
        }
<#    } #>
<#
    var readOnlyTypeNames = new []{"ReadOnlyObservableCollection", "IReadOnlyObservableCollection" };
    for(int i = 0; i < readOnlyTypeNames.Length; i++)
    {
        var typeName = readOnlyTypeNames[i];
#>

        public static ReadOnlyDeferredView<TItem> AsDeferredView<TItem>(this <#= typeName #><TItem> collection, TimeSpan bufferTime)
        {
            return new ReadOnlyDeferredView<TItem>(collection, bufferTime, null);
        }

        public static ReadOnlyDeferredView<TItem> AsDeferredView<TItem>(this <#= typeName #><TItem> collection, TimeSpan bufferTime, IScheduler scheduler)
        {
            return new ReadOnlyDeferredView<TItem>(collection, bufferTime, scheduler);
        }
<#    } #>
    }
}
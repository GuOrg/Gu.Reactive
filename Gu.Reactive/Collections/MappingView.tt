<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".generated.cs" #>
namespace Gu.Reactive
{
    using System;
    using System.Collections.ObjectModel;
    using System.Reactive.Concurrency;
    using Gu.Reactive.Internals;

    /// <summary>
    /// Factory methods for creating <see cref="MappingView{TSource, TResult}"/>
    /// </summary>
    public static partial class MappingView
    {
<#
    var typeNames = new[] {"ObservableCollection", "ReadOnlyObservableCollection", "IReadOnlyObservableCollection"};
    for(int i = 0; i < typeNames.Length; i++)
    {
        var typeName = typeNames[i];
        if(i > 0)
        {#>

<#      }    
#>
        /// <summary>
        /// Create a <see cref="MappingView{TSource, TResult}"/> for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="TSource">The type of the elements in the collection.</typeparam>
        /// <typeparam name="TResult">The type of the elements in the resulting collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="selector">The function mapping an element of type <typeparamref name="TSource"/> to <typeparamref name="TResult"/>.</param>
        /// <param name="triggers">Additional triggers for when mapping is updated.</param>
        /// <returns>A <see cref="MappingView{TSource, TResult}"/></returns>
        public static MappingView<TSource, TResult> AsMappingView<TSource, TResult>(
            this <#= typeName #><TSource> source,
            Func<TSource, TResult> selector,
            params IObservable<object>[] triggers)
        {
            Ensure.NotNull(source, nameof(source));
            Ensure.NotNull(selector, nameof(selector));
            return new MappingView<TSource, TResult>(source, selector, null, triggers);
        }

        /// <summary>
        /// Create a <see cref="MappingView{TSource, TResult}"/> for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="TSource">The type of the elements in the collection.</typeparam>
        /// <typeparam name="TResult">The type of the elements in the resulting collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="selector">The function mapping an element of type <typeparamref name="TSource"/> to <typeparamref name="TResult"/>.</param>
        /// <param name="scheduler">The scheduler to notify changes on.</param>
        /// <returns>A <see cref="MappingView{TSource, TResult}"/></returns>
        public static MappingView<TSource, TResult> AsMappingView<TSource, TResult>(
            this <#= typeName #><TSource> source,
            Func<TSource, TResult> selector,
            IScheduler scheduler)
        {
            Ensure.NotNull(source, nameof(source));
            Ensure.NotNull(selector, nameof(selector));
            return new MappingView<TSource, TResult>(source, selector, scheduler);
        }

        /// <summary>
        /// Create a <see cref="MappingView{TSource, TResult}"/> for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="TSource">The type of the elements in the collection.</typeparam>
        /// <typeparam name="TResult">The type of the elements in the resulting collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="selector">
        /// The function mapping an element of type <typeparamref name="TSource"/> to <typeparamref name="TResult"/>.</param>
        /// The second parameter is the index of the element.
        /// <param name="triggers">Additional triggers for when mapping is updated.</param>
        /// <returns>A <see cref="MappingView{TSource, TResult}"/></returns>
        public static MappingView<TSource, TResult> AsMappingView<TSource, TResult>(
            this <#= typeName #><TSource> source,
            Func<TSource, int, TResult> selector,
            params IObservable<object>[] triggers)
        {
            Ensure.NotNull(source, nameof(source));
            Ensure.NotNull(selector, nameof(selector));
            return new MappingView<TSource, TResult>(source, selector, null, triggers);
        }

        /// <summary>
        /// Create a <see cref="MappingView{TSource, TResult}"/> for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="TSource">The type of the elements in the collection.</typeparam>
        /// <typeparam name="TResult">The type of the elements in the resulting collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="selector">
        /// The function mapping an element of type <typeparamref name="TSource"/> to <typeparamref name="TResult"/>.</param>
        /// The second parameter is the index of the element.
        /// <param name="scheduler">The scheduler to notify changes on.</param>
        /// <returns>A <see cref="MappingView{TSource, TResult}"/></returns>
        public static MappingView<TSource, TResult> AsMappingView<TSource, TResult>(
            this <#= typeName #><TSource> source,
            Func<TSource, int, TResult> selector,
            IScheduler scheduler)
        {
            Ensure.NotNull(source, nameof(source));
            Ensure.NotNull(selector, nameof(selector));
            return new MappingView<TSource, TResult>(source, selector, scheduler, null);
        }

        /// <summary>
        /// Create a <see cref="MappingView{TSource, TResult}"/> for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="TSource">The type of the elements in the collection.</typeparam>
        /// <typeparam name="TResult">The type of the elements in the resulting collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="selector">
        /// The function mapping an element of type <typeparamref name="TSource"/> to <typeparamref name="TResult"/>.
        /// The second parameter is the index of the element.
        /// </param>
        /// <param name="updater">
        /// The function updating an element for which the index changed.
        /// The second parameter is the index of the element.
        /// </param>
        /// <param name="triggers">Additional triggers for when mapping is updated.</param>
        /// <returns>A <see cref="MappingView{TSource, TResult}"/></returns>
        public static MappingView<TSource, TResult> AsMappingView<TSource, TResult>(
            this <#= typeName #><TSource> source,
            Func<TSource, int, TResult> selector,
            Func<TResult, int, TResult> updater,
            params IObservable<object>[] triggers)
            where TSource : class
            where TResult : class
        {
            Ensure.NotNull(source, nameof(source));
            Ensure.NotNull(selector, nameof(selector));
            Ensure.NotNull(updater, nameof(updater));
            return new MappingView<TSource, TResult>(source, selector, updater, null, triggers);
        }

        /// <summary>
        /// Create a <see cref="MappingView{TSource, TResult}"/> for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="TSource">The type of the elements in the collection.</typeparam>
        /// <typeparam name="TResult">The type of the elements in the resulting collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="selector">
        /// The function mapping an element of type <typeparamref name="TSource"/> to <typeparamref name="TResult"/>.
        /// The second parameter is the index of the element.
        /// </param>
        /// <param name="updater">
        /// The function updating an element for which the index changed.
        /// The second parameter is the index of the element.
        /// </param>
        /// <param name="scheduler">The scheduler to notify changes on.</param>
        /// <returns>A <see cref="MappingView{TSource, TResult}"/></returns>
        public static MappingView<TSource, TResult> AsMappingView<TSource, TResult>(
            this <#= typeName #><TSource> source,
            Func<TSource, int, TResult> selector,
            Func<TResult, int, TResult> updater,
            IScheduler scheduler)
            where TSource : class
            where TResult : class
        {
            Ensure.NotNull(source, nameof(source));
            Ensure.NotNull(selector, nameof(selector));
            Ensure.NotNull(updater, nameof(updater));
            return new MappingView<TSource, TResult>(source, selector, updater, scheduler);
        }
<#    } #>
    }
}
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".generated.cs" #>
namespace Gu.Reactive
{
    using System;
    using System.Collections.ObjectModel;
    using System.Reactive.Concurrency;

    /// <summary>
    /// Factory methods for creating <see cref="ReadOnlyThrottledView{T}"/>
    /// </summary>
    public static partial class ReadOnlyThrottledView
    {
<#
    var readOnlyTypeNames = new []{"ObservableCollection", "ReadOnlyObservableCollection", "IReadOnlyObservableCollection" };
    for(int i = 0; i < readOnlyTypeNames.Length; i++)
    {
        var typeName = readOnlyTypeNames[i];
        if(i > 0)
        {#>

<#      }    
#>
        /// <summary>
        /// Create a <see cref="ReadOnlyThrottledView{T}"/> view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="bufferTime">The time to buffer changes in <paramref name="source"/></param>
        /// <param name="leaveOpen">True means that the <paramref name="source"/> is not disposed when this instance is disposed.</param>
        /// <returns>A <see cref="ReadOnlyThrottledView{T}"/></returns>
        public static ReadOnlyThrottledView<T> AsReadOnlyThrottledView<T>(this <#= typeName #><T> source, TimeSpan bufferTime, bool leaveOpen = false)
        {
            return new ReadOnlyThrottledView<T>(source, bufferTime, null, leaveOpen);
        }

        /// <summary>
        /// Create a <see cref="ReadOnlyThrottledView{T}"/> view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="bufferTime">The time to buffer changes in <paramref name="source"/></param>
        /// <param name="scheduler">The scheduler to notify changes on.</param>
        /// <param name="leaveOpen">True means that the <paramref name="source"/> is not disposed when this instance is disposed.</param>
        /// <returns>A <see cref="ReadOnlyThrottledView{T}"/></returns>
        public static ReadOnlyThrottledView<T> AsReadOnlyThrottledView<T>(this <#= typeName #><T> source, TimeSpan bufferTime, IScheduler scheduler, bool leaveOpen = false)
        {
            return new ReadOnlyThrottledView<T>(source, bufferTime, scheduler, leaveOpen);
        }
<#    } #>
    }
}
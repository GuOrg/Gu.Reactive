<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension="generated.cs" #>
namespace Gu.Reactive
{
    using System;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Linq.Expressions;

    using System.Reactive;
	using System.Reactive.Disposables;
    using System.Reactive.Linq;

    using Gu.Reactive.Internals;

    /// <summary>
    /// Factory methods for creating observables from notifying collections.
    /// </summary>
    public static partial class NotifyCollectionChangedExt
    {
<#
    var typeNames = new []
                        {
                            "ObservableCollection", 
							"ReadOnlyObservableCollection", 
							"IReadOnlyObservableCollection"
                        };
    for(int i = 0; i < typeNames.Length; i++)
    {
        var typeName = typeNames[i];
        if(i > 0)
        {#>

<#      }    
#>
        /// <summary>
        /// Observes property changes for items in the collection.
        /// </summary>
        /// <typeparam name="TItem">The type of the items in the collection</typeparam>
        /// <typeparam name="TProperty">The type of the property.</typeparam>
        /// <param name="source">The source item to track changes for.</param>
        /// <param name="property">Sample: item => item.SomeProp.SomeNestedProp</param>
        /// <param name="signalInitial">When true a reset is signaled on subscribe.</param>
        public static IObservable<EventPattern<ItemPropertyChangedEventArgs<TItem, TProperty>>> ObserveItemPropertyChanged<TItem, TProperty>(
            this <#= typeName #><TItem> source,
            Expression<Func<TItem, TProperty>> property,
            bool signalInitial = true)
            where TItem : class, INotifyPropertyChanged
        {
            Ensure.NotNull(source, nameof(source));
            Ensure.NotNull(property, nameof(property));

            return ObserveItemPropertyChanged<<#= typeName #><TItem>, TItem, TProperty>(source, property, signalInitial);
        }

        /// <summary>
        /// Observes property changes for items in the collection.
        /// </summary>
        /// <typeparam name="TItem">The type of the items in the collection</typeparam>
        /// <typeparam name="TProperty">The type of the property.</typeparam>
        /// <param name="source">The source item to track changes for.</param>
        /// <param name="property">Sample: item => item.SomeProp.SomeNestedProp</param>
        /// <param name="signalInitial">When true a reset is signaled on subscribe.</param>
        public static IObservable<PropertyChangedEventArgs> ObserveItemPropertyChangedSlim<TItem, TProperty>(
            this <#= typeName #><TItem> source,
            Expression<Func<TItem, TProperty>> property,
            bool signalInitial = true)
            where TItem : class, INotifyPropertyChanged
        {
            Ensure.NotNull(source, nameof(source));
            Ensure.NotNull(property, nameof(property));
            var observable = Observable.Create<PropertyChangedEventArgs>(o =>
            {
                var tracker = ItemsTrackerSlim.Create(source, NotifyingPath.GetOrCreate(property));
                tracker.ItemPropertyChanged += o.OnNext;
                return new CompositeDisposable(2)
                {
                    tracker,
                    Disposable.Create(() => tracker.ItemPropertyChanged -= o.OnNext)
                };
            });

            if (signalInitial)
            {
                return observable.StartWith(CachedEventArgs.StringEmpty);
            }

            return observable;
        }

        /// <summary>
        /// Used for chained subscriptions sample:
        /// source.ObservePropertyChangedWithValue(x => x.Collection, true)
        ///       .ItemPropertyChanged(x => x.Name)
        /// </summary>
        /// <typeparam name="TItem">The type of <paramref name="source"/></typeparam>
        /// <typeparam name="TProperty">The type of the property.</typeparam>
        /// <param name="source">The source instance.</param>
        /// <param name="property">An expression with the property path.</param>
        /// <returns>An observable that notifies when the property changes.</returns>
        public static IObservable<EventPattern<ItemPropertyChangedEventArgs<TItem, TProperty>>> ItemPropertyChanged<TItem, TProperty>(
             this IObservable<EventPattern<PropertyChangedAndValueEventArgs<<#= typeName #><TItem>>>> source,
             Expression<Func<TItem, TProperty>> property)
             where TItem : class, INotifyPropertyChanged
        {
            Ensure.NotNull(source, nameof(source));
            Ensure.NotNull(property, nameof(property));

            return ItemPropertyChanged<<#= typeName #><TItem>, TItem, TProperty>(source, property);
        }

        /// <summary>
        /// Used for chained subscriptions sample:
        /// source.ObservePropertyChangedWithValue(x => x.Collection, true)
        ///       .ItemPropertyChanged(x => x.Name)
        /// </summary>
        /// <typeparam name="TItem">The type of <paramref name="source"/></typeparam>
        /// <typeparam name="TProperty">The type of the property.</typeparam>
        /// <param name="source">The source instance.</param>
        /// <param name="property">An expression with the property path.</param>
        /// <returns>An observable that notifies when the property changes.</returns>
        public static IObservable<EventPattern<ItemPropertyChangedEventArgs<TItem, TProperty>>> ItemPropertyChanged<TItem, TProperty>(
             this IObservable<<#= typeName #><TItem>> source,
             Expression<Func<TItem, TProperty>> property)
             where TItem : class, INotifyPropertyChanged
        {
            Ensure.NotNull(source, nameof(source));
            Ensure.NotNull(property, nameof(property));

            return ItemPropertyChanged<<#= typeName #><TItem>, TItem, TProperty>(source, property);
        }

        /// <summary>
        /// Used for chained subscriptions sample:
        /// source.ObservePropertyChangedWithValue(x => x.Collection, true)
        ///       .ItemPropertyChangedSlim(x => x.Name)
        /// </summary>
        /// <typeparam name="TItem">The type of <paramref name="source"/></typeparam>
        /// <typeparam name="TProperty">The type of the property.</typeparam>
        /// <param name="source">The source instance.</param>
        /// <param name="property">An expression with the property path.</param>
        /// <returns>An observable that notifies when the property changes.</returns>
        public static IObservable<PropertyChangedEventArgs> ItemPropertyChangedSlim<TItem, TProperty>(
             this IObservable<<#= typeName #><TItem>> source,
             Expression<Func<TItem, TProperty>> property)
             where TItem : class, INotifyPropertyChanged
        {
            Ensure.NotNull(source, nameof(source));
            Ensure.NotNull(property, nameof(property));

            return ItemPropertyChangedSlim<<#= typeName #><TItem>, TItem, TProperty>(source, property);
        }
<#    } #>
    }
}
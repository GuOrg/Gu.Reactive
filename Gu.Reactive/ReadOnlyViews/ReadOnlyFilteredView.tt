<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".generated.cs" #>
#nullable enable
namespace Gu.Reactive
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Reactive.Concurrency;

    /// <summary>
    /// Factory methods for creating <see cref="ReadOnlyFilteredView{T}"/>
    /// </summary>
    public static partial class ReadOnlyFilteredView
    {
<#
    var typeNames = new[] { "ObservableCollection", "ReadOnlyObservableCollection", "IReadOnlyObservableCollection" };
    for(var i = 0; i < typeNames.Length; i++)
    {
        var typeName = typeNames[i];
        if(i > 0)
        {#>

<#      }    
#>
        /// <summary>
        /// Create a filtered view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="triggers">Triggers for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this <#= typeName #><T> source,
            Func<T, bool> filter,
            params IObservable<object?>[] triggers)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            return new ReadOnlyFilteredView<T>(source, filter, TimeSpan.Zero, null, false, triggers);
        }

        /// <summary>
        /// Create a filtered view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="leaveOpen">True means that the <paramref name="source"/> is not disposed when this instance is disposed.</param>
        /// <param name="triggers">Triggers for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this <#= typeName #><T> source,
            Func<T, bool> filter,
            bool leaveOpen,
            params IObservable<object?>[] triggers)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            return new ReadOnlyFilteredView<T>(source, filter, TimeSpan.Zero, null, leaveOpen, triggers);
        }

        /// <summary>
        /// Create a <see cref="ReadOnlyFilteredView{T}"/> view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="bufferTime">The time to buffer changes in <paramref name="source"/></param>
        /// <param name="triggers">Triggers for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this <#= typeName #><T> source,
            Func<T, bool> filter,
            TimeSpan bufferTime,
            params IObservable<object?>[] triggers)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            return new ReadOnlyFilteredView<T>(source, filter, bufferTime, null, false, triggers);
        }

        /// <summary>
        /// Create a <see cref="ReadOnlyFilteredView{T}"/> view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="bufferTime">The time to buffer changes in <paramref name="source"/></param>
        /// <param name="leaveOpen">True means that the <paramref name="source"/> is not disposed when this instance is disposed.</param>
        /// <param name="triggers">Triggers for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this <#= typeName #><T> source,
            Func<T, bool> filter,
            TimeSpan bufferTime,
            bool leaveOpen,
            params IObservable<object?>[] triggers)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            return new ReadOnlyFilteredView<T>(source, filter, bufferTime, null, leaveOpen, triggers);
        }

        /// <summary>
        /// Create a <see cref="ReadOnlyFilteredView{T}"/> view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="scheduler">The scheduler to notify changes on.</param>
        /// <param name="triggers">Triggers for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this <#= typeName #><T> source,
            Func<T, bool> filter,
            IScheduler scheduler,
            params IObservable<object?>[] triggers)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            if (scheduler is null)
            {
                throw new ArgumentNullException(nameof(scheduler));
            }

            return new ReadOnlyFilteredView<T>(source, filter, TimeSpan.Zero, scheduler, false, triggers);
        }

        /// <summary>
        /// Create a <see cref="ReadOnlyFilteredView{T}"/> view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="scheduler">The scheduler to notify changes on.</param>
        /// <param name="leaveOpen">True means that the <paramref name="source"/> is not disposed when this instance is disposed.</param>
        /// <param name="triggers">Triggers for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this <#= typeName #><T> source,
            Func<T, bool> filter,
            IScheduler scheduler,
            bool leaveOpen,
            params IObservable<object?>[] triggers)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            if (scheduler is null)
            {
                throw new ArgumentNullException(nameof(scheduler));
            }

            return new ReadOnlyFilteredView<T>(source, filter, TimeSpan.Zero, scheduler, leaveOpen, triggers);
        }

        /// <summary>
        /// Create a <see cref="ReadOnlyFilteredView{T}"/> view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="bufferTime">The time to buffer changes in <paramref name="source"/></param>
        /// <param name="scheduler">The scheduler to notify changes on.</param>
        /// <param name="triggers">Triggers for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this <#= typeName #><T> source,
            Func<T, bool> filter,
            TimeSpan bufferTime,
            IScheduler scheduler,
            params IObservable<object?>[] triggers)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            if (scheduler is null)
            {
                throw new ArgumentNullException(nameof(scheduler));
            }

            return new ReadOnlyFilteredView<T>(source, filter, bufferTime, scheduler, false, triggers);
        }

        /// <summary>
        /// Create a <see cref="ReadOnlyFilteredView{T}"/> view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="bufferTime">The time to buffer changes in <paramref name="source"/></param>
        /// <param name="scheduler">The scheduler to notify changes on.</param>
        /// <param name="leaveOpen">True means that the <paramref name="source"/> is not disposed when this instance is disposed.</param>
        /// <param name="triggers">Triggers for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this <#= typeName #><T> source,
            Func<T, bool> filter,
            TimeSpan bufferTime,
            IScheduler scheduler,
            bool leaveOpen,
            params IObservable<object?>[] triggers)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            if (scheduler is null)
            {
                throw new ArgumentNullException(nameof(scheduler));
            }

            return new ReadOnlyFilteredView<T>(source, filter, bufferTime, scheduler, leaveOpen, triggers);
        }

        /// <summary>
        /// Create a filtered view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="observableFactory">Factory for creating observables for the items.</param>
        /// <param name="leaveOpen">True means that the <paramref name="source"/> is not disposed when this instance is disposed.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this <#= typeName #><T> source,
            Func<T, bool> filter,
            Func<T, IObservable<object?>> observableFactory,
            bool leaveOpen = false)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            return new ReadOnlyFilteredView<T>(source, filter, observableFactory, TimeSpan.Zero, null, leaveOpen);
        }

        /// <summary>
        /// Create a filtered view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="observableFactory">Factory for creating observables for the items.</param>
        /// <param name="bufferTime">The time to buffer changes in <paramref name="source"/></param>
        /// <param name="scheduler">The scheduler to notify changes on.</param>
        /// <param name="leaveOpen">True means that the <paramref name="source"/> is not disposed when this instance is disposed.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this <#= typeName #><T> source,
            Func<T, bool> filter,
            Func<T, IObservable<object?>> observableFactory,
            TimeSpan bufferTime,
            IScheduler scheduler,
            bool leaveOpen)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            if (scheduler is null)
            {
                throw new ArgumentNullException(nameof(scheduler));
            }

            return new ReadOnlyFilteredView<T>(source, filter, observableFactory, bufferTime, scheduler, leaveOpen);
        }
<#    }

    var triggers = new[]
    {
        new[] { "IEnumerable<IObservable<object?>>", "triggers", "triggers" },
        new[] { "IObservable<object?>", "trigger", "new[] { trigger }" }
    };
    for(var i = 0; i < triggers.Length; i++)
    {
        var trigger = triggers[i];#>

        /// <summary>
        /// Create a filtered view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="<#= trigger[1] #>">Trigger for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this IEnumerable<T> source,
            Func<T, bool> filter,
            <#= trigger[0] #> <#= trigger[1] #>)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            if (<#= trigger[1] #> is null)
            {
                throw new ArgumentNullException(nameof(<#= trigger[1] #>));
            }

            return new ReadOnlyFilteredView<T>(source, filter, TimeSpan.Zero, null, false, <#= trigger[2] #>);
        }

        /// <summary>
        /// Create a filtered view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="leaveOpen">True means that the <paramref name="source"/> is not disposed when this instance is disposed.</param>
        /// <param name="<#= trigger[1] #>">Trigger for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this IEnumerable<T> source,
            Func<T, bool> filter,
            bool leaveOpen,
            <#= trigger[0] #> <#= trigger[1] #>)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            if (<#= trigger[1] #> is null)
            {
                throw new ArgumentNullException(nameof(<#= trigger[1] #>));
            }

            return new ReadOnlyFilteredView<T>(source, filter, TimeSpan.Zero, null, leaveOpen, <#= trigger[2] #>);
        }

        /// <summary>
        /// Create a filtered view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="bufferTime">The time to buffer changes in <paramref name="source"/></param>
        /// <param name="<#= trigger[1] #>">Trigger for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this IEnumerable<T> source,
            Func<T, bool> filter,
            TimeSpan bufferTime,
            <#= trigger[0] #> <#= trigger[1] #>)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            if (<#= trigger[1] #> is null)
            {
                throw new ArgumentNullException(nameof(<#= trigger[1] #>));
            }

            return new ReadOnlyFilteredView<T>(source, filter, bufferTime, null, false, <#= trigger[2] #>);
        }

        /// <summary>
        /// Create a filtered view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="bufferTime">The time to buffer changes in <paramref name="source"/></param>
        /// <param name="leaveOpen">True means that the <paramref name="source"/> is not disposed when this instance is disposed.</param>
        /// <param name="<#= trigger[1] #>">Trigger for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this IEnumerable<T> source,
            Func<T, bool> filter,
            TimeSpan bufferTime,
            bool leaveOpen,
            <#= trigger[0] #> <#= trigger[1] #>)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            if (<#= trigger[1] #> is null)
            {
                throw new ArgumentNullException(nameof(<#= trigger[1] #>));
            }

            return new ReadOnlyFilteredView<T>(source, filter, bufferTime, null, leaveOpen, <#= trigger[2] #>);
        }

        /// <summary>
        /// Create a filtered view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="scheduler">The scheduler to notify changes on.</param>
        /// <param name="<#= trigger[1] #>">Trigger for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this IEnumerable<T> source,
            Func<T, bool> filter,
            IScheduler scheduler,
            <#= trigger[0] #> <#= trigger[1] #>)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            if (scheduler is null)
            {
                throw new ArgumentNullException(nameof(scheduler));
            }

            if (<#= trigger[1] #> is null)
            {
                throw new ArgumentNullException(nameof(<#= trigger[1] #>));
            }

            return new ReadOnlyFilteredView<T>(source, filter, TimeSpan.Zero, scheduler, false, <#= trigger[2] #>);
        }

        /// <summary>
        /// Create a filtered view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="scheduler">The scheduler to notify changes on.</param>
        /// <param name="leaveOpen">True means that the <paramref name="source"/> is not disposed when this instance is disposed.</param>
        /// <param name="<#= trigger[1] #>">Trigger for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this IEnumerable<T> source,
            Func<T, bool> filter,
            IScheduler scheduler,
            bool leaveOpen,
            <#= trigger[0] #> <#= trigger[1] #>)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            if (scheduler is null)
            {
                throw new ArgumentNullException(nameof(scheduler));
            }

            if (<#= trigger[1] #> is null)
            {
                throw new ArgumentNullException(nameof(<#= trigger[1] #>));
            }

            return new ReadOnlyFilteredView<T>(source, filter, TimeSpan.Zero, scheduler, leaveOpen, <#= trigger[2] #>);
        }

        /// <summary>
        /// Create a filtered view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="bufferTime">The time to buffer changes in <paramref name="source"/></param>
        /// <param name="scheduler">The scheduler to notify changes on.</param>
        /// <param name="<#= trigger[1] #>">Trigger for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this IEnumerable<T> source,
            Func<T, bool> filter,
            TimeSpan bufferTime,
            IScheduler scheduler,
            <#= trigger[0] #> <#= trigger[1] #>)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            if (scheduler is null)
            {
                throw new ArgumentNullException(nameof(scheduler));
            }

            if (<#= trigger[1] #> is null)
            {
                throw new ArgumentNullException(nameof(<#= trigger[1] #>));
            }

            return new ReadOnlyFilteredView<T>(source, filter, bufferTime, scheduler, false, <#= trigger[2] #>);
        }

        /// <summary>
        /// Create a filtered view for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="T">The type of the elements in the source collection.</typeparam>
        /// <param name="source">The source collection</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="bufferTime">The time to buffer changes in <paramref name="source"/></param>
        /// <param name="scheduler">The scheduler to notify changes on.</param>
        /// <param name="leaveOpen">True means that the <paramref name="source"/> is not disposed when this instance is disposed.</param>
        /// <param name="<#= trigger[1] #>">Trigger for when filtering is updated.</param>
        /// <returns>A <see cref="ReadOnlyFilteredView{T}"/></returns>
        public static ReadOnlyFilteredView<T> AsReadOnlyFilteredView<T>(
            this IEnumerable<T> source,
            Func<T, bool> filter,
            TimeSpan bufferTime,
            IScheduler scheduler,
            bool leaveOpen,
            <#= trigger[0] #> <#= trigger[1] #>)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (filter is null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            if (scheduler is null)
            {
                throw new ArgumentNullException(nameof(scheduler));
            }

            if (<#= trigger[1] #> is null)
            {
                throw new ArgumentNullException(nameof(<#= trigger[1] #>));
            }

            return new ReadOnlyFilteredView<T>(source, filter, bufferTime, scheduler, leaveOpen, <#= trigger[2] #>);
        }
<#    } #>
    }
}
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".generated.cs" #>
#pragma warning disable SA1619 // Generic type parameters must be documented partial class
#nullable enable
namespace Gu.Reactive
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Reactive.Concurrency;

    /// <summary>
    /// Generated constructors
    /// </summary>
    public partial class ReadOnlyFilteredView<T>
    {
<#
    var typeNames = new[] {"ObservableCollection", "ReadOnlyObservableCollection", "IReadOnlyObservableCollection", "IObservableCollection" };
    for(var i = 0; i < typeNames.Length; i++)
    {
        var typeName = typeNames[i];
        if(i > 0)
        {#>

<#      }    
#>
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadOnlyFilteredView{T}"/> class.
        /// </summary>
        /// <param name="source">The source collection.</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="bufferTime">The time to buffer source changes before updating the view.</param>
        /// <param name="scheduler">The scheduler to perform the filtering and notification on.</param>
        /// <param name="triggers">Additional triggers for when to filter.</param>
        public ReadOnlyFilteredView(<#= typeName #><T> source, Func<T, bool> filter, TimeSpan bufferTime, IScheduler? scheduler, params IObservable<object?>[]? triggers)
            : this(source, filter, bufferTime, scheduler, false, triggers)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReadOnlyFilteredView{T}"/> class.
        /// </summary>
        /// <param name="source">The source collection.</param>
        /// <param name="filter">The predicate to filter by.</param>
        /// <param name="bufferTime">The time to buffer source changes before updating the view.</param>
        /// <param name="scheduler">The scheduler to perform the filtering and notification on.</param>
        /// <param name="leaveOpen">True means that the <paramref name="source"/> is not disposed when this instance is disposed.</param>
        /// <param name="triggers">Additional triggers for when to filter.</param>
        public ReadOnlyFilteredView(<#= typeName #><T> source, Func<T, bool> filter, TimeSpan bufferTime, IScheduler? scheduler, bool leaveOpen, params IObservable<object?>[]? triggers)
            : this(source, filter, bufferTime, scheduler, leaveOpen, (IEnumerable<IObservable<object?>>?)triggers)
        {
        }
<#    } #>
    }
}
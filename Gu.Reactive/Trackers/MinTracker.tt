<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension="generated.cs" #>
namespace Gu.Reactive
{
    using System;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Linq.Expressions;

    /// <summary>
    /// Factory methods for creating trackers for min value.
    /// </summary>
    public static class MinTracker
    {
<#
    var typeNames = new[] {"ObservableCollection", "ReadOnlyObservableCollection", "IReadOnlyObservableCollection"};
    for(int i = 0; i < typeNames.Length; i++)
    {
        var typeName = typeNames[i];
        if(i > 0)
        {#>

<#      }    
#>
        /// <summary>
        /// Creates a <see cref="MinTracker{TValue}"/> for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="TItem">The type of the items in <paramref name="source"/></typeparam>
        /// <typeparam name="TValue">The type of the min value.</typeparam>
        /// <param name="source">The source collection.</param>
        /// <param name="selector">The function used when producing a value from an item.</param>
        /// <returns>A tracker with Value synced with source.Min()</returns>
        public static MinTracker<TValue> TrackMin<TItem, TValue>(this <#= typeName #><TItem> source, Expression<Func<TItem, TValue>> selector)
            where TItem : class, INotifyPropertyChanged
            where TValue : struct, IComparable<TValue>
        {
            return new MinTracker<TValue>(new NestedChanges<<#= typeName #><TItem>, TItem, TValue>(source, selector));
        }

        /// <summary>
        /// Creates a <see cref="MinTracker{TValue}"/> for <paramref name="source"/>
        /// </summary>
        /// <typeparam name="TValue">The type of the min value.</typeparam>
        /// <param name="source">The source collection.</param>
        /// <returns>A tracker with Value synced with source.Min()</returns>
        public static MinTracker<TValue> TrackMin<TValue>(this <#= typeName #><TValue> source)
            where TValue : struct, IComparable<TValue>
        {
            return new MinTracker<TValue>(new SimpleChanges<<#= typeName #><TValue>, TValue>(source));
        }
<#      }    
#>
    }
}
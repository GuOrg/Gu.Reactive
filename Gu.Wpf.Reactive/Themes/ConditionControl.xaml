<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Gu.Wpf.Reactive"
                    xmlns:reactive="clr-namespace:Gu.Reactive;assembly=Gu.Reactive">
    <DataTemplate x:Key="ConditionHistoryTemplate" DataType="{x:Type reactive:ICondition}">
        <TextBlock Text="{Binding History, Converter={x:Static local:ConditionHistoryToStringConverter.Default}}" />
    </DataTemplate>

    <ControlTemplate x:Key="{x:Static local:ConditionControl.ConditionTemplateKey}" TargetType="{x:Type local:ConditionControl}">
        <Border x:Name="Border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <TreeView Background="Transparent"
                      BorderThickness="0"
                      ItemContainerStyle="{DynamicResource {x:Static local:ConditionControl.TreeViewItemStyleKey}}"
                      ItemsSource="{TemplateBinding Root}">
                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type reactive:ICondition}" ItemsSource="{Binding Prerequisites}">
                        <TextBlock Text="{Binding Name}" />
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>

            <Border.ToolTip>
                <GroupBox Header="History">
                    <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource ConditionHistoryTemplate}" />
                </GroupBox>
            </Border.ToolTip>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsInSync" Value="False">
                <Setter TargetName="Border" Property="BorderThickness" Value="0,0,0,1" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Red" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ConditionTreeViewItemBaseStyle" TargetType="{x:Type TreeViewItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSatisfied}" Value="True">
                <Setter Property="Foreground" Value="#FF2DE52D" />
            </DataTrigger>

            <DataTrigger Binding="{Binding IsSatisfied}" Value="False">
                <Setter Property="Foreground" Value="#FFE52D2D" />
            </DataTrigger>

            <DataTrigger Binding="{Binding IsSatisfied}" Value="{x:Null}">
                <Setter Property="Foreground" Value="#FF888888" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static local:ConditionControl.AllExpandedTreeViewItemStyleKey}"
           BasedOn="{StaticResource ConditionTreeViewItemBaseStyle}"
           TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="True" />
    </Style>

    <Style x:Key="{x:Static local:ConditionControl.CollapseSatisfiedTreeViewItemStyleKey}"
           BasedOn="{StaticResource ConditionTreeViewItemBaseStyle}"
           TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="False" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSatisfied}" Value="True">
                <Setter Property="IsExpanded" Value="False" />
            </DataTrigger>

            <DataTrigger Binding="{Binding IsSatisfied}" Value="False">
                <Setter Property="IsExpanded" Value="True" />
            </DataTrigger>

            <DataTrigger Binding="{Binding IsSatisfied}" Value="{x:Null}">
                <Setter Property="IsExpanded" Value="True" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static local:ConditionControl.TreeViewItemStyleKey}"
           BasedOn="{StaticResource {x:Static local:ConditionControl.CollapseSatisfiedTreeViewItemStyleKey}}"
           TargetType="{x:Type TreeViewItem}" />

    <Style x:Key="{x:Static local:ConditionControl.SingleConditionControlStyleKey}" TargetType="{x:Type local:ConditionControl}">
        <Setter Property="Template" Value="{DynamicResource {x:Static local:ConditionControl.ConditionTemplateKey}}" />
    </Style>

    <Style TargetType="{x:Type local:ConditionControl}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template" Value="{StaticResource {x:Static local:ConditionControl.ConditionTemplateKey}}" />
    </Style>
</ResourceDictionary>
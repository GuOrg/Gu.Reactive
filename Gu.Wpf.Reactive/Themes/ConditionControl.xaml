<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Gu.Wpf.Reactive"
                    xmlns:reactive="clr-namespace:Gu.Reactive;assembly=Gu.Reactive">
    <DataTemplate x:Key="ConditionHistoryTemplate" DataType="{x:Type reactive:ICondition}">
        <TextBlock Text="{Binding History, Converter={x:Static local:ConditionHistoryToStringConverter.Default}}" />
    </DataTemplate>

    <ControlTemplate x:Key="{x:Static local:ConditionControl.ConditionTemplateKey}" TargetType="{x:Type local:ConditionControl}">
        <Border x:Name="Border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <TreeView Background="Transparent"
                      BorderThickness="0"
                      Focusable="False"
                      ItemContainerStyle="{DynamicResource {x:Static local:ConditionControl.TreeViewItemStyleKey}}"
                      ItemsSource="{TemplateBinding Root}">
                <TreeView.Resources>
                    <Style x:Key="UnderlineWhenNotInSyncStyle" TargetType="{x:Type TextBlock}">
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="ToolTip">
                            <Setter.Value>
                                <GroupBox Header="History">
                                    <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource ConditionHistoryTemplate}" />
                                </GroupBox>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=local:ConditionControl}, Path=IsInSync}" Value="False">
                                <Setter Property="TextDecorations" Value="Underline" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TreeView.Resources>
                <TreeView.ItemTemplateSelector>
                    <local:ConditionTypeTemplateSelector>
                        <local:ConditionTypeTemplateSelector.DefaultTemplate>
                            <HierarchicalDataTemplate DataType="{x:Type reactive:ICondition}" ItemsSource="{Binding Prerequisites}">
                                <TextBlock Name="NameTextBlock"
                                           Style="{StaticResource UnderlineWhenNotInSyncStyle}"
                                           Text="{Binding Name}" />
                            </HierarchicalDataTemplate>
                        </local:ConditionTypeTemplateSelector.DefaultTemplate>

                        <local:ConditionTypeTemplateSelector.NegatedConditionTemplate>
                            <HierarchicalDataTemplate DataType="{x:Type reactive:ICondition}" ItemsSource="{Binding Prerequisites}">
                                <TextBlock Name="NameTextBlock"
                                           Style="{StaticResource UnderlineWhenNotInSyncStyle}"
                                           Text="{Binding Prerequisites[0].Name}" />
                            </HierarchicalDataTemplate>
                        </local:ConditionTypeTemplateSelector.NegatedConditionTemplate>
                    </local:ConditionTypeTemplateSelector>
                </TreeView.ItemTemplateSelector>
            </TreeView>
        </Border>
    </ControlTemplate>

    <Style x:Key="ConditionTreeViewItemBaseStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="28" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander"
                                      Grid.RowSpan="2"
                                      VerticalAlignment="Stretch"
                                      ClickMode="Press"
                                      Content="{Binding}"
                                      Foreground="{TemplateBinding Foreground}"
                                      IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.ContentTemplateSelector>
                                <local:ConditionTypeTemplateSelector>
                                    <local:ConditionTypeTemplateSelector.NodeConditionTemplate>
                                        <DataTemplate>
                                            <TextBlock />
                                        </DataTemplate>
                                    </local:ConditionTypeTemplateSelector.NodeConditionTemplate>

                                    <local:ConditionTypeTemplateSelector.AndConditionTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="AND" />
                                        </DataTemplate>
                                    </local:ConditionTypeTemplateSelector.AndConditionTemplate>

                                    <local:ConditionTypeTemplateSelector.OrConditionTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="OR" />
                                        </DataTemplate>
                                    </local:ConditionTypeTemplateSelector.OrConditionTemplate>

                                    <local:ConditionTypeTemplateSelector.NegatedConditionTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="NOT" />
                                        </DataTemplate>
                                    </local:ConditionTypeTemplateSelector.NegatedConditionTemplate>
                                </local:ConditionTypeTemplateSelector>
                            </ToggleButton.ContentTemplateSelector>
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border Padding="1,0"
                                            Background="Transparent"
                                            BorderBrush="{TemplateBinding Foreground}"
                                            BorderThickness="0,1,1,1">
                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </Border>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>

                        <ContentPresenter x:Name="PART_Header"
                                          Grid.Row="0"
                                          Grid.Column="1"
                                          Margin="1,0,0,0"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          ContentSource="Header"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSatisfied}" Value="True">
                <Setter Property="Foreground" Value="#FF2DE52D" />
            </DataTrigger>

            <DataTrigger Binding="{Binding IsSatisfied}" Value="False">
                <Setter Property="Foreground" Value="#FFE52D2D" />
            </DataTrigger>

            <DataTrigger Binding="{Binding IsSatisfied}" Value="{x:Null}">
                <Setter Property="Foreground" Value="#FF888888" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static local:ConditionControl.AllExpandedTreeViewItemStyleKey}"
           BasedOn="{StaticResource ConditionTreeViewItemBaseStyle}"
           TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="True" />
    </Style>

    <Style x:Key="{x:Static local:ConditionControl.CollapseSatisfiedTreeViewItemStyleKey}"
           BasedOn="{StaticResource ConditionTreeViewItemBaseStyle}"
           TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="False" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSatisfied}" Value="True">
                <Setter Property="IsExpanded" Value="False" />
            </DataTrigger>

            <DataTrigger Binding="{Binding IsSatisfied}" Value="False">
                <Setter Property="IsExpanded" Value="True" />
            </DataTrigger>

            <DataTrigger Binding="{Binding IsSatisfied}" Value="{x:Null}">
                <Setter Property="IsExpanded" Value="True" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static local:ConditionControl.TreeViewItemStyleKey}"
           BasedOn="{StaticResource {x:Static local:ConditionControl.CollapseSatisfiedTreeViewItemStyleKey}}"
           TargetType="{x:Type TreeViewItem}" />

    <Style x:Key="{x:Static local:ConditionControl.SingleConditionControlStyleKey}" TargetType="{x:Type local:ConditionControl}">
        <Setter Property="Template" Value="{DynamicResource {x:Static local:ConditionControl.ConditionTemplateKey}}" />
    </Style>

    <Style TargetType="{x:Type local:ConditionControl}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template" Value="{StaticResource {x:Static local:ConditionControl.ConditionTemplateKey}}" />
    </Style>
</ResourceDictionary>
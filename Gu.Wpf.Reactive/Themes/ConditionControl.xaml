<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Gu.Wpf.Reactive"
                    xmlns:reactive="clr-namespace:Gu.Reactive;assembly=Gu.Reactive">
    <DataTemplate x:Key="ConditionHistoryTemplate" DataType="{x:Type reactive:ICondition}">
        <DataGrid AutoGenerateColumns="True"
                  CanUserAddRows="False"
                  CanUserDeleteRows="False"
                  ItemsSource="{Binding History}" />
    </DataTemplate>

    <ControlTemplate x:Key="{x:Static local:ConditionControl.ConditionTemplateKey}" TargetType="{x:Type local:ConditionControl}">
        <ControlTemplate.Resources>
            <local:ConditionTypeTemplateSelector x:Key="IconTemplateSelector">
                <local:ConditionTypeTemplateSelector.AndConditionTemplate>
                    <DataTemplate DataType="{x:Type reactive:AndCondition}">
                        <TextBlock Text="&amp;" />
                    </DataTemplate>
                </local:ConditionTypeTemplateSelector.AndConditionTemplate>

                <local:ConditionTypeTemplateSelector.OrConditionTemplate>
                    <DataTemplate DataType="{x:Type reactive:OrCondition}">
                        <TextBlock Text="|" />
                    </DataTemplate>
                </local:ConditionTypeTemplateSelector.OrConditionTemplate>

                <local:ConditionTypeTemplateSelector.NegatedConditionTemplate>
                    <DataTemplate DataType="{x:Type reactive:NegatedCondition}">
                        <TextBlock Text="!" />
                    </DataTemplate>
                </local:ConditionTypeTemplateSelector.NegatedConditionTemplate>

                <local:ConditionTypeTemplateSelector.NodeConditionTemplate>
                    <DataTemplate DataType="{x:Type reactive:Condition}">
                        <TextBlock Text="" />
                    </DataTemplate>
                </local:ConditionTypeTemplateSelector.NodeConditionTemplate>
            </local:ConditionTypeTemplateSelector>
        </ControlTemplate.Resources>
        <Border x:Name="Border"
                Background="Transparent"
                BorderBrush="{x:Null}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="0" Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}">
                    <Ellipse Stretch="Fill" StrokeThickness="2">
                        <Ellipse.Style>
                            <Style TargetType="{x:Type Ellipse}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Condition.IsSatisfied, RelativeSource={RelativeSource AncestorType={x:Type local:ConditionControl}}}" Value="True">
                                        <Setter Property="Stroke" Value="Green" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Condition.IsSatisfied, RelativeSource={RelativeSource AncestorType={x:Type local:ConditionControl}}}" Value="False">
                                        <Setter Property="Stroke" Value="Red" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Condition.IsSatisfied, RelativeSource={RelativeSource AncestorType={x:Type local:ConditionControl}}}" Value="{x:Null}">
                                        <Setter Property="Stroke" Value="Gray" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Ellipse.Style>
                    </Ellipse>
                    <ContentPresenter HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Content="{TemplateBinding Condition}"
                                      ContentTemplateSelector="{StaticResource IconTemplateSelector}"
                                      Focusable="False" />
                </Grid>

                <TextBlock x:Name="TextBlock"
                           Grid.Column="1"
                           Margin="5,0,0,0"
                           VerticalAlignment="Center"
                           Focusable="False"
                           Text="{Binding Condition.Name,
                                          RelativeSource={RelativeSource AncestorType={x:Type local:ConditionControl}},
                                          Mode=OneTime}" />
            </Grid>
            <Border.ToolTip>
                <GroupBox Header="History">
                    <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource ConditionHistoryTemplate}" />
                </GroupBox>
            </Border.ToolTip>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsInSync" Value="False">
                <Setter TargetName="Border" Property="BorderThickness" Value="2" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Red" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static local:ConditionControl.AllExpandedTreeViewItemStyleKey}" TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="True" />
    </Style>

    <Style x:Key="{x:Static local:ConditionControl.CollapseSatisfiedTreeViewItemStyleKey}" TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="False" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSatisfied}" Value="False">
                <Setter Property="IsExpanded" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSatisfied}" Value="{x:Null}">
                <Setter Property="IsExpanded" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSatisfied}" Value="True">
                <Setter Property="IsExpanded" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static local:ConditionControl.TreeviewItemStyleKey}"
           BasedOn="{StaticResource {x:Static local:ConditionControl.CollapseSatisfiedTreeViewItemStyleKey}}"
           TargetType="{x:Type TreeViewItem}" />

    <Style x:Key="{x:Static local:ConditionControl.SingleConditionControlStyleKey}" TargetType="{x:Type local:ConditionControl}">
        <Setter Property="Template" Value="{DynamicResource {x:Static local:ConditionControl.ConditionTemplateKey}}" />
    </Style>

    <Style TargetType="{x:Type local:ConditionControl}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ConditionControl}">
                    <TreeView Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              ItemContainerStyle="{DynamicResource {x:Static local:ConditionControl.TreeviewItemStyleKey}}"
                              ItemsSource="{TemplateBinding Root}">
                        <TreeView.ItemTemplate>
                            <HierarchicalDataTemplate DataType="{x:Type reactive:ICondition}" ItemsSource="{Binding Prerequisites}">
                                <local:ConditionControl Condition="{Binding}" Template="{DynamicResource {x:Static local:ConditionControl.ConditionTemplateKey}}" />
                            </HierarchicalDataTemplate>
                        </TreeView.ItemTemplate>
                    </TreeView>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>